help sqrt

#Matrices and Vectors
% The ; denotes we are going back to a new row.
A = [1, 2, 3; 4, 5,1 6; 7, 8, 9; 10, 11, 12]

% Initialize a vector 
v = [1;2;3] 

% Get the dimension of the matrix A where m = rows and n = columns
[m,n] = size(A)

% You could also store it this way
dim_A = size(A)

% Get the dimension of the vector v 
dim_v = size(v)

% Now let's index into the 2nd row 3rd column of matrix A
A_23 = A(2,3)





#Addition and Scalar Multiplication
% Initialize matrix A and B 
A = [1, 2, 4; 5, 3, 2]
B = [1, 3, 4; 1, 1, 1]

% Initialize constant s 
s = 2

% See how element-wise addition works
add_AB = A + B % Initialize matrix A and B 
A = [1, 2, 4; 5, 3, 2]
B = [1, 3, 4; 1, 1, 1]

% Initialize constant s 
s = 2

% See how element-wise addition works
add_AB = A + B 

% See how element-wise subtraction works
sub_AB = A - B

% See how scalar multiplication works
mult_As = A * s

% Divide A by s
div_As = A / s

% What happens if we have a Matrix + scalar?
add_As = A + s

% See how element-wise subtraction works
sub_AB = A - B

% See how scalar multiplication works
mult_As = A * s

% Divide A by s
div_As = A / s

% What happens if we have a Matrix + scalar?
add_As = A + s





#Matrix-Vector Multiplication
% Initialize matrix A 
A = [1, 2, 3; 4, 5, 6;7, 8, 9] 

% Initialize vector v 
v = [1; 1; 1] 

% Multiply A * v
Av = A * v




#Matrix-Matrix Multiplication
% Initialize a 3 by 2 matrix 
A = [1, 2; 3, 4;5, 6]

% Initialize a 2 by 1 matrix 
B = [1; 2] 

% We expect a resulting matrix of (3 by 2)*(2 by 1) = (3 by 1) 
mult_AB = A*B





#Matrix Multiplication Properties
% Initialize random matrices A and B 
A = [1,2;4,5]
B = [1,1;0,2]

% Initialize a 2 by 2 identity matrix
I = eye(2)

% The above notation is the same as I = [1,0;0,1]

% What happens when we multiply I*A ? 
IA = I*A 

% How about A*I ? 
AI = A*I 

% Compute A*B 
AB = A*B 

% Is it equal to B*A? 
BA = B*A 





#Inverse and Transpose
% Initialize matrix A 
A = [1,2,0;0,5,6;7,0,9]

% Transpose A 
A_trans = A' 

% Take the inverse of A 
A_inv = inv(A)

% What is A^(-1)*A? 
A_invA = inv(A)*A



1 == (3-2) %returns truw
1 ~= (3-2) %returns false
1 && 0 %logical and
1 || 0 %logical or
xor(1,0)

%declare variable
a = 3
a = 3;
a = 'hello world'
a = (4>=3)
a = pi
disp(a)
disp(sprintf('2 decimals: %0.2f', a)) %print float number with only 2 decimals

format long
format short

ones(2,3) %generates 2 by 3, all 1 matrix
c = 2*ones(2,3)
zeros(2,3)
rand(2,3)
eye(4) %4 by 4 identity matrix

sqrt(9)

hist(variable,10) %graphical histogram, 10 for more buckets

size(A) %returns number of rows and columns of a matrix in a 1 by 2 mtatrix
size(A,1) %number of rows
size(A,2) %number of columns
length(A) %print longest size of a matrix

load 'file_name' %read file data

who %list all variables
whos %list all variables with details
clear variable_name %remove variable and its content

save haello.mat v; %saves variable v in hellot.mat file
save haello.txt v -ascii; %saves variable v in hellot.txt file

A(3,2) %print given position
A(:,2) %print 2nd column
A = [A, [100; 102; 102]] %append new column
A(:) %convert matrix A to vector
C = [A B] %concatinate A and B into C
C = [A; B]
A .* B %A and B are matrixes, this is element wise
log(A)
abs(A)
max(A) %for vector
max(max(A)) %for matrix
max(A,[],1) %column wise max
max(A,[],2) %row wise max
[val, ind] = max(A) %svae maximum number and its index

find(A < 3) %show index of the element which are smaller than 3
[r, c] = find(A < 3) %store position in r (row) and c (column) variables

sum(A) %sum of all the elements in A
prod(A) %* of all elements



#plotting data
t=[0:0.01:0.98]
y1 = sin(2*pi*4*t)
plot(t,y1)

y2 = cos(2*pi*4*t)
plot(t,y2)

#to plot multiple variable
plot(t,y1)
hold on;
plot(t,y2,'r')

xlabel('time')
ylabel('value')

legend('sin','cos') #top right, to indicate different colors

title('test plot')

print -dpng 'plot.png' %save plot in png

figure(1)
figure(2) %multiple plot at the same time

subplot(1,2,1) %divides plot a 1x2 grid, access first element

axis([0.5 1 -1 1]) %change scale

clf %clear plot
