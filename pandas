import pandas as pd

#in pandas, column-wise using axis=0 and row-wise using axis=1

#create dataframe
data = [['tom', 10], ['nick', 15], ['juli', 14]] 
df = pd.DataFrame(data, columns = ['Name', 'Age'])

#read data from csv file
df = pd.read_csv('/path/to/file.csv')

#read data from excel file
df = pd.read_excel('/path/to/file.xlsx')

#read data from tab seprated text file
df = pd.read_csv('/path/to/file.txt',delimiter='\t')

#print data
print(df)
print(df.head(3)) #default is 5
print(df.tail(3)) #default is 5

#print headers
print(df.columns)

#print specific column
print(df['column_header']) #all rows
print(df['column_header'][1:5]) #given rows

#print multiple columns
print(df[['column_header_1','column_header_3','column_header_2']]) #all rows
print(df[['column_header_1','column_header_3','column_header_2']][0:5]) #given rows

#print row
print(df.iloc[1])
print(df.iloc[1:4])

#print specific location
print(df.iloc[2,4])

#iterate through rows
for index, row in df.iterrows():
  print(index, row) #all columns
  print(index, row['column-header_1']) #specific column

df.loc[df['column-header'] == "something"]

#sort
df.sort_values('column1', ascending=False) #only print sorted data based on column1 and does not change df content
df.sort_values(['column_header_1','column_header_2'], ascending=[1,0])

#changing data
df['new_column'] = 0 #adds new column with header new_column and makes its xontent 0 on all rows
df['new_column'] = df['column1'] + df['column2']
df['new_column'] = df.iloc[:,1:4].sum(axis=1)
df = df.drop(columns=['column_header1]) #remove column
df = df[['column_header_3','column_header_1','column_header_5']]

cols = list(df.columns) #store all headers as list in cols variable
df = [cols[0:3] + [cols[-1]] + cols[4:8]] #rearrange columns 

df.iat[0,1] = "hi" #change specific cell data

#storing data
df.to_csv('/path/to/file.csv') #adds indx column to data frame and csv file
df.to_csv('/path/to/file.csv', index=False) #without added index column
df.to_excel('/path/to/file.xlsx', index=False)
df.to_csv('/path/to/file.txt', index=False, sep='\t') #text file sprated by tab

#filtering data
df.loc[df['column_header_1'] == 'grass'] #print rows that have grass in column_header_1
df.loc[(df['column_header_1'] == 'grass') & (df['column_header_3'] == 'poison')]
df.loc[(df['column_header_1'] == 'grass') | (df['column_header_3'] == 'poison')]
df.loc[df['column_header_1'] > 80]
df.loc[df['column_header'].str.contains('mega')] #print rows that contains mega in column-header, accepts regex
df.loc[~df['column_header'].str.contains('mega')] #like previos one but in reverse
new_df = new_df.reset_index(drop=True)

#conditional changes
df.loc[df['column_header'] == 'Fire', 'column_header' ] = 'Flamer' #in column_header replace Fire with Flamer, second column_header can be another header label
